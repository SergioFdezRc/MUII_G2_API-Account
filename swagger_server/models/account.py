# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, password: str=None, age: int=None, birthdate: str=None, email_confirmed_at: str=None, role: str=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param username: The username of this Account.  # noqa: E501
        :type username: str
        :param password: The password of this Account.  # noqa: E501
        :type password: str
        :param age: The age of this Account.  # noqa: E501
        :type age: int
        :param birthdate: The birthdate of this Account.  # noqa: E501
        :type birthdate: str
        :param email_confirmed_at: The confirmed email date of this Account.  # noqa: E501
        :type email_confirmed_at: str
        :param role: The role of this Account.  # noqa: E501
        :type role: str
        """
        self.swagger_types = {
            'username': str,
            'password': str,
            'age': int,
            'birthdate': str,
            'email_confirmed_at': str,
            'role': str
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'age': 'age',
            'birthdate': 'birthdate',
            'email_confirmed_at': 'birthdate'
        }
        self._username = username
        self._password = password
        self._age = age
        self._birthdate = birthdate
        self._email_confirmed_at = email_confirmed_at
        self._role = role 

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this Account.


        :return: The username of this Account.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Account.


        :param username: The username of this Account.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this Account.


        :return: The password of this Account.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Account.


        :param password: The password of this Account.
        :type password: str
        """

        self._password = password

    @property
    def age(self) -> int:
        """Gets the age of this Account.


        :return: The age of this Account.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this Account.


        :param age: The age of this Account.
        :type age: int
        """

        self._age = age

    @property
    def birthdate(self) -> str:
        """Gets the birthdate of this Account.


        :return: The birthdate of this Account.
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate: str):
        """Sets the birthdate of this Account.


        :param birthdate: The birthdate of this Account.
        :type birthdate: str
        """

        self._birthdate = birthdate

    @property
    def email_confirmed_at(self) -> str:
        """Gets the role this Account.


        :return: The confirmed email date of this Account..
        :rtype: str
        """
        return self._email_confirmed_at

    @email_confirmed_at.setter
    def email_confirmed_at(self, email_confirmed_at: str):
        """Sets the confirmed email date of this Account..


        :param birthdate: The confirmed email date of this Account..
        :type birthdate: str
        """

        self._email_confirmed_at = email_confirmed_at

    @property
    def role(self) -> str:
        """Gets the role of this Account.


        :return: The role of this Account.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Account..


        :param birthdate: The role of this Account..
        :type birthdate: str
        """

        self._role = role

